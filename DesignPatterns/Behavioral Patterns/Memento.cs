using System;
using System.Collections.Generic;
using System.Linq;

namespace DesignPatterns.Behavioral
{
    /// <summary>
    /*
     Предположим, что вы пишете программу текстового редактора. Помимо обычного редактирования, ваш редактор позволяет менять форматирование текста, вставлять картинки и прочее.

    В какой-то момент вы решили сделать все эти действия отменяемыми. Для этого вам нужно сохранять текущее состояние редактора перед тем, как выполнить любое действие. Если потом пользователь решит отменить своё действие, вы достанете копию состояния из истории и восстановите старое состояние редактора.

    Перед выполнением команды вы можете сохранить копию состояния редактора, чтобы потом иметь возможность отменить операцию.

    Чтобы сделать копию состояния объекта, достаточно скопировать значение его полей. Таким образом, если вы сделали класс редактора достаточно открытым, то любой другой класс сможет заглянуть внутрь, чтобы скопировать его состояние.

    Казалось бы, что ещё нужно? Ведь теперь любая операция сможет сделать резервную копию редактора перед своим действием. Но такой наивный подход обеспечит вам уйму проблем в будущем. Ведь если вы решите провести рефакторинг — убрать или добавить парочку полей в класс редактора — то придётся менять код всех классов, которые могли копировать состояние редактора.

    Но это ещё не все. Давайте теперь рассмотрим сами копии состояния редактора. Из чего состоит состояние редактора? Даже самый примитивный редактор должен иметь несколько полей для хранения текущего текста, позиции курсора и прокрутки экрана. Чтобы сделать копию состояния, вам нужно записать значения всех этих полей в некий «контейнер».

    Скорее всего, вам понадобится хранить массу таких контейнеров в качестве истории операций, поэтому удобнее всего сделать их объектами одного класса. Этот класс должен иметь много полей, но практически никаких методов. Чтобы другие объекты могли записывать и читать из него данные, вам придётся сделать его поля публичными. Но это приведёт к той же проблеме, что и с открытым классом редактора. Другие классы станут зависимыми от любых изменений в классе контейнера, который подвержен тем же изменениям, что и класс редактора.

    Получается, нам придётся либо открыть классы для всех желающих, испытывая массу хлопот с поддержкой кода, либо оставить классы закрытыми, отказавшись от идеи отмены операций. Нет ли какого-то другого пути?

    Все проблемы, описанные выше, возникают из-за нарушения инкапсуляции. Это когда одни объекты пытаются сделать работу за других, влезая в их приватную зону, чтобы собрать необходимые для операции данные.

    Паттерн Снимок поручает создание копии состояния объекта самому объекту, который этим состоянием владеет. Вместо того, чтобы делать снимок «извне», наш редактор сам сделает копию своих полей, ведь ему доступны все поля, даже приватные.

    Паттерн предлагает держать копию состояния в специальном объекте-снимке с ограниченным интерфейсом, позволяющим, например, узнать дату изготовления или название снимка. Но, с другой стороны, снимок должен быть открыт для своего создателя, позволяя прочесть и восстановить его внутреннее состояние.

    Такая схема позволяет создателям производить снимки и отдавать их для хранения другим объектам, называемым опекунами. Опекунам будет доступен только ограниченный интерфейс снимка, поэтому они никак не смогут повлиять на «внутренности» самого снимка. В нужный момент опекун может попросить создателя восстановить своё состояние, передав ему соответствующий снимок.

    В примере с редактором вы можете сделать опекуном отдельный класс, который будет хранить список выполненных операций. Ограниченный интерфейс снимков позволит демонстрировать пользователю красивый список с названиями и датами выполненных операций. А когда пользователь решит откатить операцию, класс истории возьмёт последний снимок из стека и отправит его объекту редактор для восстановления.

    Нужно реализовывать вместе с паттерном Prototype (что бы копировать не ссылку обьекта, а значения)
     */
    /// </summary>
    public class Memento
    {
        #region TextEditor

        public class TextEditor
        {
            private string text;
            private string style;
            public void SetText(string text, string style)
            {
                this.text = text;
                this.style = style;
            }

            public IMemento Save()
            {
                var copy = (TextEditor)this.MemberwiseClone();
                return new TextMemento(copy);
            }

            public void Restore(IMemento memento)
            {
                text = memento.GetImage().text;
                style = memento.GetImage().style;
            }

            public string ShowText()
            {
                return $"Text - {text}, style - {style}";
            }
        }
        #endregion

        #region Memento

        public interface IMemento
        {
            public DateTime GetDate();
            public TextEditor GetImage();
        }

        public class TextMemento : IMemento
        {
            private TextEditor textEditor;
            private DateTime date;

            public TextMemento(TextEditor textEditor)
            {
                this.textEditor = textEditor;
                this.date = DateTime.UtcNow;
            }

            public DateTime GetDate() => date;

            public TextEditor GetImage() => textEditor;
        }

        public class MementoHistoty
        {
            private IList<IMemento> mementos;
            private TextEditor textEditor;

            public MementoHistoty(TextEditor textEditor)
            {
                mementos = new List<IMemento>();
                this.textEditor = textEditor;
            }

            public void Backup()
            {
                mementos.Add(textEditor.Save());
            }

            public void Undo()
            {
                if (!mementos.Any())
                    return;

                this.textEditor.Restore(mementos.Last());
            }
        }
        #endregion
    }
}
